{"ast":null,"code":"var _jsxFileName = \"C:\\\\BogdanC\\\\Facultate\\\\Probe\\\\Rezervari\\\\cinema-ticket-booking-system\\\\frontend\\\\src\\\\components\\\\Genre.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport FetchGenres from '../API/GetGenres';\nimport RemoveUnwantedGenres from '../utils/RemoveNonCinemaGenres';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Genres = ({\n  setGenreIds\n}) => {\n  _s();\n  const [genres, setGenres] = useState([]);\n  const [clickedGenres, setClickedGenres] = useState([]);\n  const ACCESS_TOKEN = process.env.REACT_APP_ACCESS_TOKEN || '';\n  useEffect(() => {\n    const fetchData = async () => {\n      const fetchedGenres = await FetchGenres(ACCESS_TOKEN);\n      const filteredGenres = RemoveUnwantedGenres(fetchedGenres);\n      setGenres(filteredGenres);\n      setClickedGenres(Array(filteredGenres.length).fill(false));\n    };\n    fetchData();\n  }, [ACCESS_TOKEN]);\n  useEffect(() => {\n    const updatedGenreIds = clickedGenres.map((clicked, index) => clicked ? genres[index].id : null).filter(id => id !== null);\n    setGenreIds(updatedGenreIds);\n  }, [clickedGenres, genres, setGenreIds]);\n  const handleGenreClick = index => {\n    setClickedGenres(prevClickedGenres => {\n      const newClickedGenres = [...prevClickedGenres];\n      newClickedGenres[index] = !newClickedGenres[index];\n      return newClickedGenres;\n    });\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const fetchedGenres = await FetchGenres(ACCESS_TOKEN);\n        console.log('Fetched genres:', fetchedGenres); // Debugging: VerificƒÉ ce returneazƒÉ FetchGenres\n        const filteredGenres = RemoveUnwantedGenres(fetchedGenres);\n        console.log('Filtered genres:', filteredGenres); // Debugging: VerificƒÉ rezultatul dupƒÉ filtrare\n        setGenres(filteredGenres);\n        setClickedGenres(Array(filteredGenres.length).fill(false));\n      } catch (error) {\n        console.error('Error in fetchData:', error);\n      }\n    };\n    fetchData();\n  }, [ACCESS_TOKEN]);\n  const genreEmojis = {\n    28: 'üí•',\n    // Action\n    12: 'üèûÔ∏è',\n    // Adventure\n    16: 'üìΩÔ∏è',\n    // Animation\n    35: 'üòÇ',\n    // Comedy\n    10751: '‚ù§Ô∏è',\n    // Family\n    14: 'üßô‚Äç‚ôÇÔ∏è',\n    // Fantasy\n    9648: 'üîç',\n    // Mystery\n    878: 'ü§ñ',\n    // Science Fiction\n    18: 'üé≠',\n    // Drama\n    27: 'üëª',\n    // Horror\n    53: 'üò±',\n    // Thriller\n    10402: 'üéµ',\n    // Music\n    36: 'üìú',\n    // History\n    10752: '‚öîÔ∏è',\n    // War\n    10749: 'üíë',\n    // Romance\n    80: 'üî´' // Crime\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap m-4 justify-between\",\n    children: genres.map((genre, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `inline-block ${clickedGenres[index] ? 'bg-red-700' : 'bg-red-500 hover:bg-red-700'} text-white rounded px-3 py-1 text-sm font-semibold mx-1 my-1 cursor-pointer`,\n      onClick: () => handleGenreClick(index),\n      children: [genreEmojis[genre.id], \" \", genre.name]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Genres, \"h4wgqEFGNlPr/Fc7SW3azJxjwrQ=\");\n_c = Genres;\nexport default Genres;\nvar _c;\n$RefreshReg$(_c, \"Genres\");","map":{"version":3,"names":["React","useEffect","useState","FetchGenres","RemoveUnwantedGenres","jsxDEV","_jsxDEV","Genres","setGenreIds","_s","genres","setGenres","clickedGenres","setClickedGenres","ACCESS_TOKEN","process","env","REACT_APP_ACCESS_TOKEN","fetchData","fetchedGenres","filteredGenres","Array","length","fill","updatedGenreIds","map","clicked","index","id","filter","handleGenreClick","prevClickedGenres","newClickedGenres","console","log","error","genreEmojis","className","children","genre","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/BogdanC/Facultate/Probe/Rezervari/cinema-ticket-booking-system/frontend/src/components/Genre.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport FetchGenres from '../API/GetGenres';\r\nimport RemoveUnwantedGenres from '../utils/RemoveNonCinemaGenres';\r\n\r\nconst Genres = ({ setGenreIds }) => {\r\n  const [genres, setGenres] = useState([]);\r\n  const [clickedGenres, setClickedGenres] = useState([]);\r\n\r\n  const ACCESS_TOKEN = process.env.REACT_APP_ACCESS_TOKEN || '';\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const fetchedGenres = await FetchGenres(ACCESS_TOKEN);\r\n      const filteredGenres = RemoveUnwantedGenres(fetchedGenres);\r\n      setGenres(filteredGenres);\r\n      setClickedGenres(Array(filteredGenres.length).fill(false));\r\n    };\r\n\r\n    fetchData();\r\n  }, [ACCESS_TOKEN]);\r\n\r\n  useEffect(() => {\r\n    const updatedGenreIds = clickedGenres\r\n      .map((clicked, index) => (clicked ? genres[index].id : null))\r\n      .filter((id) => id !== null);\r\n    setGenreIds(updatedGenreIds);\r\n  }, [clickedGenres, genres, setGenreIds]);\r\n\r\n  const handleGenreClick = (index) => {\r\n    setClickedGenres((prevClickedGenres) => {\r\n      const newClickedGenres = [...prevClickedGenres];\r\n      newClickedGenres[index] = !newClickedGenres[index];\r\n      return newClickedGenres;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const fetchedGenres = await FetchGenres(ACCESS_TOKEN);\r\n        console.log('Fetched genres:', fetchedGenres); // Debugging: VerificƒÉ ce returneazƒÉ FetchGenres\r\n        const filteredGenres = RemoveUnwantedGenres(fetchedGenres);\r\n        console.log('Filtered genres:', filteredGenres); // Debugging: VerificƒÉ rezultatul dupƒÉ filtrare\r\n        setGenres(filteredGenres);\r\n        setClickedGenres(Array(filteredGenres.length).fill(false));\r\n      } catch (error) {\r\n        console.error('Error in fetchData:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [ACCESS_TOKEN]);\r\n\r\n\r\n  const genreEmojis = {\r\n    28: 'üí•', // Action\r\n    12: 'üèûÔ∏è', // Adventure\r\n    16: 'üìΩÔ∏è', // Animation\r\n    35: 'üòÇ', // Comedy\r\n    10751: '‚ù§Ô∏è', // Family\r\n    14: 'üßô‚Äç‚ôÇÔ∏è', // Fantasy\r\n    9648: 'üîç', // Mystery\r\n    878: 'ü§ñ', // Science Fiction\r\n    18: 'üé≠', // Drama\r\n    27: 'üëª', // Horror\r\n    53: 'üò±', // Thriller\r\n    10402: 'üéµ', // Music\r\n    36: 'üìú', // History\r\n    10752: '‚öîÔ∏è', // War\r\n    10749: 'üíë', // Romance\r\n    80: 'üî´', // Crime\r\n  };\r\n\r\n  return (\r\n    <div className='flex flex-wrap m-4 justify-between'>\r\n      {genres.map((genre, index) => (\r\n        <span\r\n          key={index}\r\n          className={`inline-block ${\r\n            clickedGenres[index] ? 'bg-red-700' : 'bg-red-500 hover:bg-red-700'\r\n          } text-white rounded px-3 py-1 text-sm font-semibold mx-1 my-1 cursor-pointer`}\r\n          onClick={() => handleGenreClick(index)}\r\n        >\r\n          {genreEmojis[genre.id]} {genre.name}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Genres;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,oBAAoB,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMY,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,EAAE;EAE7DhB,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,aAAa,GAAG,MAAMhB,WAAW,CAACW,YAAY,CAAC;MACrD,MAAMM,cAAc,GAAGhB,oBAAoB,CAACe,aAAa,CAAC;MAC1DR,SAAS,CAACS,cAAc,CAAC;MACzBP,gBAAgB,CAACQ,KAAK,CAACD,cAAc,CAACE,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,YAAY,CAAC,CAAC;EAElBb,SAAS,CAAC,MAAM;IACd,MAAMuB,eAAe,GAAGZ,aAAa,CAClCa,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAMD,OAAO,GAAGhB,MAAM,CAACiB,KAAK,CAAC,CAACC,EAAE,GAAG,IAAK,CAAC,CAC5DC,MAAM,CAAED,EAAE,IAAKA,EAAE,KAAK,IAAI,CAAC;IAC9BpB,WAAW,CAACgB,eAAe,CAAC;EAC9B,CAAC,EAAE,CAACZ,aAAa,EAAEF,MAAM,EAAEF,WAAW,CAAC,CAAC;EAExC,MAAMsB,gBAAgB,GAAIH,KAAK,IAAK;IAClCd,gBAAgB,CAAEkB,iBAAiB,IAAK;MACtC,MAAMC,gBAAgB,GAAG,CAAC,GAAGD,iBAAiB,CAAC;MAC/CC,gBAAgB,CAACL,KAAK,CAAC,GAAG,CAACK,gBAAgB,CAACL,KAAK,CAAC;MAClD,OAAOK,gBAAgB;IACzB,CAAC,CAAC;EACJ,CAAC;EAED/B,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMhB,WAAW,CAACW,YAAY,CAAC;QACrDmB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEf,aAAa,CAAC,CAAC,CAAC;QAC/C,MAAMC,cAAc,GAAGhB,oBAAoB,CAACe,aAAa,CAAC;QAC1Dc,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEd,cAAc,CAAC,CAAC,CAAC;QACjDT,SAAS,CAACS,cAAc,CAAC;QACzBP,gBAAgB,CAACQ,KAAK,CAACD,cAAc,CAACE,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;MAC5D,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;IACF,CAAC;IAEDjB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,YAAY,CAAC,CAAC;EAGlB,MAAMsB,WAAW,GAAG;IAClB,EAAE,EAAE,IAAI;IAAE;IACV,EAAE,EAAE,KAAK;IAAE;IACX,EAAE,EAAE,KAAK;IAAE;IACX,EAAE,EAAE,IAAI;IAAE;IACV,KAAK,EAAE,IAAI;IAAE;IACb,EAAE,EAAE,OAAO;IAAE;IACb,IAAI,EAAE,IAAI;IAAE;IACZ,GAAG,EAAE,IAAI;IAAE;IACX,EAAE,EAAE,IAAI;IAAE;IACV,EAAE,EAAE,IAAI;IAAE;IACV,EAAE,EAAE,IAAI;IAAE;IACV,KAAK,EAAE,IAAI;IAAE;IACb,EAAE,EAAE,IAAI;IAAE;IACV,KAAK,EAAE,IAAI;IAAE;IACb,KAAK,EAAE,IAAI;IAAE;IACb,EAAE,EAAE,IAAI,CAAE;EACZ,CAAC;EAED,oBACE9B,OAAA;IAAK+B,SAAS,EAAC,oCAAoC;IAAAC,QAAA,EAChD5B,MAAM,CAACe,GAAG,CAAC,CAACc,KAAK,EAAEZ,KAAK,kBACvBrB,OAAA;MAEE+B,SAAS,EAAG,gBACVzB,aAAa,CAACe,KAAK,CAAC,GAAG,YAAY,GAAG,6BACvC,8EAA8E;MAC/Ea,OAAO,EAAEA,CAAA,KAAMV,gBAAgB,CAACH,KAAK,CAAE;MAAAW,QAAA,GAEtCF,WAAW,CAACG,KAAK,CAACX,EAAE,CAAC,EAAC,GAAC,EAACW,KAAK,CAACE,IAAI;IAAA,GAN9Bd,KAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAON,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpC,EAAA,CApFIF,MAAM;AAAAuC,EAAA,GAANvC,MAAM;AAsFZ,eAAeA,MAAM;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}