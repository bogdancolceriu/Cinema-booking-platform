{"ast":null,"code":"async function FetchGenres(ACCESS_TOKEN) {\n  try {\n    const response = await fetch('https://api.themoviedb.org/3/genre/movie/list?language=en', {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer ' + ACCESS_TOKEN\n      }\n    });\n    if (!response.ok) {\n      console.error('Failed to fetch genres:', response.statusText);\n      return []; // Returnează un array gol dacă răspunsul nu este ok\n    }\n    const data = await response.json();\n    console.log('Fetched genres data:', data); // Debugging\n    return data.genres || []; // Returnează un array gol dacă `genres` nu există\n  } catch (error) {\n    console.error('Error fetching genres:', error);\n    return []; // Returnează un array gol dacă apare o eroare\n  }\n}\n_c = FetchGenres;\nexport default FetchGenres;\nvar _c;\n$RefreshReg$(_c, \"FetchGenres\");","map":{"version":3,"names":["FetchGenres","ACCESS_TOKEN","response","fetch","method","headers","accept","Authorization","ok","console","error","statusText","data","json","log","genres","_c","$RefreshReg$"],"sources":["C:/BogdanC/Facultate/Probe/Rezervari/cinema-ticket-booking-system/frontend/src/API/GetGenres.js"],"sourcesContent":["async function FetchGenres(ACCESS_TOKEN) {\r\n    try {\r\n        const response = await fetch(\r\n            'https://api.themoviedb.org/3/genre/movie/list?language=en',\r\n            {\r\n                method: 'GET',\r\n                headers: {\r\n                    accept: 'application/json',\r\n                    Authorization: 'Bearer ' + ACCESS_TOKEN,\r\n                },\r\n            },\r\n        );\r\n\r\n        if (!response.ok) {\r\n            console.error('Failed to fetch genres:', response.statusText);\r\n            return []; // Returnează un array gol dacă răspunsul nu este ok\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('Fetched genres data:', data); // Debugging\r\n        return data.genres || []; // Returnează un array gol dacă `genres` nu există\r\n    } catch (error) {\r\n        console.error('Error fetching genres:', error);\r\n        return []; // Returnează un array gol dacă apare o eroare\r\n    }\r\n}\r\n\r\nexport default FetchGenres;\r\n"],"mappings":"AAAA,eAAeA,WAAWA,CAACC,YAAY,EAAE;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,2DAA2D,EAC3D;MACIC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACLC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAE,SAAS,GAAGN;MAC/B;IACJ,CACJ,CAAC;IAED,IAAI,CAACC,QAAQ,CAACM,EAAE,EAAE;MACdC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAER,QAAQ,CAACS,UAAU,CAAC;MAC7D,OAAO,EAAE,CAAC,CAAC;IACf;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClCJ,OAAO,CAACK,GAAG,CAAC,sBAAsB,EAAEF,IAAI,CAAC,CAAC,CAAC;IAC3C,OAAOA,IAAI,CAACG,MAAM,IAAI,EAAE,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE,CAAC,CAAC;EACf;AACJ;AAACM,EAAA,GAzBchB,WAAW;AA2B1B,eAAeA,WAAW;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}