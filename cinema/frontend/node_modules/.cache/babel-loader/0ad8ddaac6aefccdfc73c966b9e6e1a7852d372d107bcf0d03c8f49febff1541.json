{"ast":null,"code":"function seededRandom(seed) {\n  let x = Math.sin(seed) * 10000;\n  return x - Math.floor(x);\n}\nfunction getRandomOffset(hallNumber, seed) {\n  const offsets = [[0, 15, 45], [0, 15, 45], [0, 15, 45], [0, 15, 45], [0, 15, 45], [0, 15, 45]];\n  if (offsets[hallNumber]) {\n    const options = offsets[hallNumber];\n    return options[Math.floor(seededRandom(seed) * options.length)];\n  } else {\n    return 0;\n  }\n}\nfunction MovieSessions(movie, hallNumber) {\n  const language = 'ðŸ”Š ' + movie.original_language.toUpperCase();\n  const currentTime = new Date();\n  const sessionStartTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), 9, 0, 0);\n  const sessionEndTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate() + 1, 0, 0, 0);\n  const sessionDuration = 195;\n  const movieSessions = [];\n  const seed = hallNumber * 100;\n  while (sessionStartTime <= sessionEndTime) {\n    const offsetMinutes = getRandomOffset(hallNumber, seed);\n    const sessionTime = new Date(sessionStartTime);\n    sessionTime.setMinutes(sessionTime.getMinutes() + offsetMinutes);\n    if (sessionTime <= sessionEndTime) {\n      movieSessions.push({\n        time: sessionTime.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        language\n      });\n    }\n    sessionStartTime.setMinutes(sessionStartTime.getMinutes() + sessionDuration);\n  }\n  return movieSessions;\n}\n_c = MovieSessions;\nexport default MovieSessions;\nvar _c;\n$RefreshReg$(_c, \"MovieSessions\");","map":{"version":3,"names":["seededRandom","seed","x","Math","sin","floor","getRandomOffset","hallNumber","offsets","options","length","MovieSessions","movie","language","original_language","toUpperCase","currentTime","Date","sessionStartTime","getFullYear","getMonth","getDate","sessionEndTime","sessionDuration","movieSessions","offsetMinutes","sessionTime","setMinutes","getMinutes","push","time","toLocaleTimeString","hour","minute","_c","$RefreshReg$"],"sources":["C:/BogdanC/Facultate/Probe/Rezervari/cinema-ticket-booking-system/frontend/src/mockData/MovieSessions.js"],"sourcesContent":["function seededRandom(seed) {\r\n  let x = Math.sin(seed) * 10000;\r\n  return x - Math.floor(x);\r\n}\r\n\r\nfunction getRandomOffset(hallNumber, seed) {\r\n  const offsets = [\r\n    [0, 15, 45],\r\n    [0, 15, 45],\r\n    [0, 15, 45],\r\n    [0, 15, 45],\r\n    [0, 15, 45],\r\n    [0, 15, 45],\r\n  ];\r\n\r\n  if (offsets[hallNumber]) {\r\n    const options = offsets[hallNumber];\r\n    return options[Math.floor(seededRandom(seed) * options.length)];\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nfunction MovieSessions(movie, hallNumber) {\r\n  const language = 'ðŸ”Š ' + movie.original_language.toUpperCase();\r\n  const currentTime = new Date(); \r\n  const sessionStartTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), 9, 0, 0); \r\n  const sessionEndTime = new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate() + 1, 0, 0, 0); \r\n  const sessionDuration = 195;\r\n  const movieSessions = [];\r\n\r\n  const seed = hallNumber * 100;\r\n\r\n  while (sessionStartTime <= sessionEndTime) {\r\n    const offsetMinutes = getRandomOffset(hallNumber, seed);\r\n    const sessionTime = new Date(sessionStartTime);\r\n    sessionTime.setMinutes(sessionTime.getMinutes() + offsetMinutes);\r\n\r\n    if (sessionTime <= sessionEndTime) {\r\n      movieSessions.push({\r\n        time: sessionTime.toLocaleTimeString([], {\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n        }),\r\n        language,\r\n      });\r\n    }\r\n\r\n    sessionStartTime.setMinutes(sessionStartTime.getMinutes() + sessionDuration);\r\n  }\r\n\r\n  return movieSessions;\r\n}\r\n\r\nexport default MovieSessions;\r\n"],"mappings":"AAAA,SAASA,YAAYA,CAACC,IAAI,EAAE;EAC1B,IAAIC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,IAAI,CAAC,GAAG,KAAK;EAC9B,OAAOC,CAAC,GAAGC,IAAI,CAACE,KAAK,CAACH,CAAC,CAAC;AAC1B;AAEA,SAASI,eAAeA,CAACC,UAAU,EAAEN,IAAI,EAAE;EACzC,MAAMO,OAAO,GAAG,CACd,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACX,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACX,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACX,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACX,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACX,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CACZ;EAED,IAAIA,OAAO,CAACD,UAAU,CAAC,EAAE;IACvB,MAAME,OAAO,GAAGD,OAAO,CAACD,UAAU,CAAC;IACnC,OAAOE,OAAO,CAACN,IAAI,CAACE,KAAK,CAACL,YAAY,CAACC,IAAI,CAAC,GAAGQ,OAAO,CAACC,MAAM,CAAC,CAAC;EACjE,CAAC,MAAM;IACL,OAAO,CAAC;EACV;AACF;AAEA,SAASC,aAAaA,CAACC,KAAK,EAAEL,UAAU,EAAE;EACxC,MAAMM,QAAQ,GAAG,KAAK,GAAGD,KAAK,CAACE,iBAAiB,CAACC,WAAW,CAAC,CAAC;EAC9D,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,MAAMC,gBAAgB,GAAG,IAAID,IAAI,CAACD,WAAW,CAACG,WAAW,CAAC,CAAC,EAAEH,WAAW,CAACI,QAAQ,CAAC,CAAC,EAAEJ,WAAW,CAACK,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACpH,MAAMC,cAAc,GAAG,IAAIL,IAAI,CAACD,WAAW,CAACG,WAAW,CAAC,CAAC,EAAEH,WAAW,CAACI,QAAQ,CAAC,CAAC,EAAEJ,WAAW,CAACK,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACtH,MAAME,eAAe,GAAG,GAAG;EAC3B,MAAMC,aAAa,GAAG,EAAE;EAExB,MAAMvB,IAAI,GAAGM,UAAU,GAAG,GAAG;EAE7B,OAAOW,gBAAgB,IAAII,cAAc,EAAE;IACzC,MAAMG,aAAa,GAAGnB,eAAe,CAACC,UAAU,EAAEN,IAAI,CAAC;IACvD,MAAMyB,WAAW,GAAG,IAAIT,IAAI,CAACC,gBAAgB,CAAC;IAC9CQ,WAAW,CAACC,UAAU,CAACD,WAAW,CAACE,UAAU,CAAC,CAAC,GAAGH,aAAa,CAAC;IAEhE,IAAIC,WAAW,IAAIJ,cAAc,EAAE;MACjCE,aAAa,CAACK,IAAI,CAAC;QACjBC,IAAI,EAAEJ,WAAW,CAACK,kBAAkB,CAAC,EAAE,EAAE;UACvCC,IAAI,EAAE,SAAS;UACfC,MAAM,EAAE;QACV,CAAC,CAAC;QACFpB;MACF,CAAC,CAAC;IACJ;IAEAK,gBAAgB,CAACS,UAAU,CAACT,gBAAgB,CAACU,UAAU,CAAC,CAAC,GAAGL,eAAe,CAAC;EAC9E;EAEA,OAAOC,aAAa;AACtB;AAACU,EAAA,GA7BQvB,aAAa;AA+BtB,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}