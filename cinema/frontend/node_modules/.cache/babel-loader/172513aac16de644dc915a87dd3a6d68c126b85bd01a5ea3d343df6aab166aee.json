{"ast":null,"code":"async function FetchMoviesByGenre(ACCESS_TOKEN, page, genreIds) {\n  const genreIdsURL = genreIds.length > 0 ? genreIds.join(',') : '';\n  const url = `https://api.themoviedb.org/3/discover/movie?api_key=${ACCESS_TOKEN}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_genres=${genreIdsURL}`;\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${ACCESS_TOKEN}`\n      }\n    });\n    const data = await response.json();\n    const filteredMovies = data.results.filter(movie => movie.backdrop_path !== null);\n    return {\n      filteredMovies,\n      totalPages: data.total_pages\n    };\n  } catch (error) {\n    console.error('Error fetching movies by genre:', error);\n    return null;\n  }\n}\n_c = FetchMoviesByGenre;\nexport default FetchMoviesByGenre;\nvar _c;\n$RefreshReg$(_c, \"FetchMoviesByGenre\");","map":{"version":3,"names":["FetchMoviesByGenre","ACCESS_TOKEN","page","genreIds","genreIdsURL","length","join","url","response","fetch","method","headers","accept","Authorization","data","json","filteredMovies","results","filter","movie","backdrop_path","totalPages","total_pages","error","console","_c","$RefreshReg$"],"sources":["C:/BogdanC/Facultate/Probe/Rezervari/cinema-ticket-booking-system/frontend/src/API/FetchMoviesByGenre.js"],"sourcesContent":["async function FetchMoviesByGenre(ACCESS_TOKEN, page, genreIds) {\r\n  const genreIdsURL = genreIds.length > 0 ? genreIds.join(',') : '';\r\n  const url = `https://api.themoviedb.org/3/discover/movie?api_key=${ACCESS_TOKEN}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_genres=${genreIdsURL}`;\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        accept: 'application/json',\r\n        Authorization: `Bearer ${ACCESS_TOKEN}`,\r\n      },\r\n    });\r\n    const data = await response.json();\r\n\r\n    const filteredMovies = data.results.filter(\r\n      (movie) => movie.backdrop_path !== null,\r\n    );\r\n\r\n    return { filteredMovies, totalPages: data.total_pages };\r\n  } catch (error) {\r\n    console.error('Error fetching movies by genre:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default FetchMoviesByGenre;\r\n"],"mappings":"AAAA,eAAeA,kBAAkBA,CAACC,YAAY,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EAC9D,MAAMC,WAAW,GAAGD,QAAQ,CAACE,MAAM,GAAG,CAAC,GAAGF,QAAQ,CAACG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;EACjE,MAAMC,GAAG,GAAI,uDAAsDN,YAAa,wFAAuFC,IAAK,gBAAeE,WAAY,EAAC;EAExM,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAChCG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAG,UAASZ,YAAa;MACxC;IACF,CAAC,CAAC;IACF,MAAMa,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAAO,CAACC,MAAM,CACvCC,KAAK,IAAKA,KAAK,CAACC,aAAa,KAAK,IACrC,CAAC;IAED,OAAO;MAAEJ,cAAc;MAAEK,UAAU,EAAEP,IAAI,CAACQ;IAAY,CAAC;EACzD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,IAAI;EACb;AACF;AAACE,EAAA,GAvBczB,kBAAkB;AAyBjC,eAAeA,kBAAkB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}