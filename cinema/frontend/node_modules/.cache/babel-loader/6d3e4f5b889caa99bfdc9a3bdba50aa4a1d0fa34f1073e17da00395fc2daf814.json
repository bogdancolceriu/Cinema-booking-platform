{"ast":null,"code":"async function GetRecommendedMovies(userId) {\n  try {\n    const response = await fetch(`http://localhost:8080/api/v1/order/${userId}`, {\n      method: 'GET',\n      headers: {\n        accept: 'application/json'\n      }\n    });\n    if (response.status === 404) {\n      console.log('User not found');\n      return null;\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n_c = GetRecommendedMovies;\nexport default GetRecommendedMovies;\nvar _c;\n$RefreshReg$(_c, \"GetRecommendedMovies\");","map":{"version":3,"names":["GetRecommendedMovies","userId","response","fetch","method","headers","accept","status","console","log","data","json","error","_c","$RefreshReg$"],"sources":["C:/BogdanC/Facultate/Probe/Rezervari/cinema-ticket-booking-system/frontend/src/API/GetRecommendedMovies.js"],"sourcesContent":["async function GetRecommendedMovies(userId) {\r\n  try {\r\n    const response = await fetch(`http://localhost:8080/api/v1/order/${userId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        accept: 'application/json',\r\n      },\r\n    });\r\n\r\n    if (response.status === 404) {\r\n      console.log('User not found');\r\n      return null;\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default GetRecommendedMovies;\r\n"],"mappings":"AAAA,eAAeA,oBAAoBA,CAACC,MAAM,EAAE;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCF,MAAO,EAAC,EAAE;MAC3EG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;IAEF,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;MAC3BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,OAAO,IAAI;IACb;IAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,IAAI;EACb;AACF;AAACC,EAAA,GApBcb,oBAAoB;AAsBnC,eAAeA,oBAAoB;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}