{"ast":null,"code":"import FilterValidMovies from '../utils/FilterValidMovies';\nasync function FetchMoviesBySearch(ACCESS_TOKEN, page, searchText) {\n  const url = `https://api.themoviedb.org/3/search/multi?api_key=${ACCESS_TOKEN}&language=en-US&query=${encodeURIComponent(searchText)}&page=${page}&include_adult=false`;\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${ACCESS_TOKEN}`\n      }\n    });\n    const data = await response.json();\n    const filteredMovies = FilterValidMovies(data.results).filter(movie => movie.backdrop_path !== null);\n    return {\n      filteredMovies,\n      totalPages: data.total_pages\n    };\n  } catch (error) {\n    console.error('Error fetching movies by search:', error);\n    return null;\n  }\n}\n_c = FetchMoviesBySearch;\nexport default FetchMoviesBySearch;\nvar _c;\n$RefreshReg$(_c, \"FetchMoviesBySearch\");","map":{"version":3,"names":["FilterValidMovies","FetchMoviesBySearch","ACCESS_TOKEN","page","searchText","url","encodeURIComponent","response","fetch","method","headers","accept","Authorization","data","json","filteredMovies","results","filter","movie","backdrop_path","totalPages","total_pages","error","console","_c","$RefreshReg$"],"sources":["C:/BogdanC/Facultate/Probe/Rezervari/cinema-ticket-booking-system/frontend/src/API/FetchMoviesBySearch.js"],"sourcesContent":["import FilterValidMovies from '../utils/FilterValidMovies';\r\nasync function FetchMoviesBySearch(ACCESS_TOKEN, page, searchText) {\r\n  const url = `https://api.themoviedb.org/3/search/multi?api_key=${ACCESS_TOKEN}&language=en-US&query=${encodeURIComponent(\r\n    searchText,\r\n  )}&page=${page}&include_adult=false`;\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        accept: 'application/json',\r\n        Authorization: `Bearer ${ACCESS_TOKEN}`,\r\n      },\r\n    });\r\n    const data = await response.json();\r\n\r\n    const filteredMovies = FilterValidMovies(data.results).filter(\r\n      (movie) => movie.backdrop_path !== null,\r\n    );\r\n\r\n    return { filteredMovies, totalPages: data.total_pages };\r\n  } catch (error) {\r\n    console.error('Error fetching movies by search:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default FetchMoviesBySearch;\r\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,4BAA4B;AAC1D,eAAeC,mBAAmBA,CAACC,YAAY,EAAEC,IAAI,EAAEC,UAAU,EAAE;EACjE,MAAMC,GAAG,GAAI,qDAAoDH,YAAa,yBAAwBI,kBAAkB,CACtHF,UACF,CAAE,SAAQD,IAAK,sBAAqB;EAEpC,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAChCI,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAG,UAASV,YAAa;MACxC;IACF,CAAC,CAAC;IACF,MAAMW,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,MAAMC,cAAc,GAAGf,iBAAiB,CAACa,IAAI,CAACG,OAAO,CAAC,CAACC,MAAM,CAC1DC,KAAK,IAAKA,KAAK,CAACC,aAAa,KAAK,IACrC,CAAC;IAED,OAAO;MAAEJ,cAAc;MAAEK,UAAU,EAAEP,IAAI,CAACQ;IAAY,CAAC;EACzD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,IAAI;EACb;AACF;AAACE,EAAA,GAxBcvB,mBAAmB;AA0BlC,eAAeA,mBAAmB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}